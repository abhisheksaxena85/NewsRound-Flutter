import 'package:flutter/material.dart';import 'package:mailer/mailer.dart';import 'package:mailer/smtp_server.dart';class ContactPage extends StatelessWidget {  @override  Widget build(BuildContext context) {    return MaterialApp(      home: Scaffold(        appBar: AppBar(          title: Text('Contact Us'),        ),        body: ContactForm(),      ),    );  }}class ContactForm extends StatefulWidget {  @override  _ContactFormState createState() => _ContactFormState();}class _ContactFormState extends State<ContactForm> {  final _formKey = GlobalKey<FormState>();  final _emailController = TextEditingController();  final _subjectController = TextEditingController();  final _messageController = TextEditingController();  @override  void dispose() {    _emailController.dispose();    _subjectController.dispose();    _messageController.dispose();    super.dispose();  }  Future<void> sendEmail(String recipientEmail, String subject, String body) async {    final smtpServer = gmail('abhisheksaxena904411@gmail.com', 'gdtnuxgjqbwtbnur');    final message = Message()      ..from = Address('abhisheksaxena904411@gmail.com', 'Abhishek Saxena')      ..recipients.add(recipientEmail)      ..subject = subject      ..text = body;    try {      final sendReport = await send(message, smtpServer);      print('Message sent: ' + sendReport.toString());      ScaffoldMessenger.of(context).showSnackBar(        SnackBar(content: Text('Email sent successfully!')),      );    } on MailerException catch (e) {      print('Message not sent. \n' + e.toString());      ScaffoldMessenger.of(context).showSnackBar(        SnackBar(content: Text('Failed to send email.')),      );    }  }  void _sendEmail() {    if (_formKey.currentState!.validate()) {      sendEmail(        _emailController.text,        _subjectController.text,        _messageController.text,      );    }  }  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.all(16.0),      child: Form(        key: _formKey,        child: Column(          children: [            TextFormField(              controller: _emailController,              decoration: InputDecoration(labelText: 'Email'),              validator: (value) {                if (value == null || value.isEmpty) {                  return 'Please enter your email';                }                return null;              },            ),            TextFormField(              controller: _subjectController,              decoration: InputDecoration(labelText: 'Subject'),              validator: (value) {                if (value == null || value.isEmpty) {                  return 'Please enter a subject';                }                return null;              },            ),            TextFormField(              controller: _messageController,              decoration: InputDecoration(labelText: 'Message'),              maxLines: 4,              validator: (value) {                if (value == null || value.isEmpty) {                  return 'Please enter your message';                }                return null;              },            ),            SizedBox(height: 20),            ElevatedButton(              onPressed: _sendEmail,              child: Text('Send'),            ),          ],        ),      ),    );  }}