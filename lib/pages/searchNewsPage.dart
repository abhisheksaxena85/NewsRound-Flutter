import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_spinkit/flutter_spinkit.dart';import 'package:flutter_svg/svg.dart';import 'package:news_round/internetBloc/internet_bloc.dart';import 'package:news_round/internetBloc/internet_state.dart';import 'package:news_round/models/categoryNewsAPImodel.dart';import 'package:news_round/newsViewModel/categoriesNewsViewModel.dart';import 'package:news_round/pages/dashboardWidgets/categoriesContentWidget.dart';class searchNewsPage extends StatefulWidget {  @override  State<searchNewsPage> createState() => _searchNewsPageState();}class _searchNewsPageState extends State<searchNewsPage> {  //Editing controller for texfield of appBar  TextEditingController appBarSearchController = TextEditingController();  //List of total available categories on search class  List<String> categories = [    'General',    'Business',    'Entertainment',    'News',    'Health',    'International',    'LifeStyle',    'Politics',    'Sports',    'Science',    'Technology',    'Research',    'SpaceScience'  ];  //Color of each container when selected or unselected  String categoryName = 'General';  //Visibility of category title on each category  bool isTitleVisible = false;  //Search appearence  bool searchActive = false;  //API Url for each category API call  String? APIbaseUrl = 'https://newsapi.org/v2/everything?q=';  String? APIkeyUrl = '&language=en&pageSize=40&apiKey=48e59a053b73438a8b3334e7f46ce875';  @override  void initState() {    dataLoading();    super.initState();  }  //Making API call for initialization data  Future<categoryNewsAPImodel> dataLoading() async {    return await categoriesNewsViewModel().fetchCategoryNews(        "${APIbaseUrl!}${categoryName.toLowerCase()}${APIkeyUrl!}");  }  @override  Widget build(BuildContext context) {    print(categories.length.toString());    //ThemeMode boolean    bool theme = MediaQuery.of(context).platformBrightness == Brightness.light;    bool lightTheme = theme ? true : false;    //Getting screen width and height    double width = MediaQuery.of(context).size.width * 1;    double height = MediaQuery.of(context).size.height * 1;    //Root widget of class    return Scaffold(        //Custom appbar with search feature        appBar: AppBar(          surfaceTintColor: lightTheme ? Colors.white : Colors.grey.shade900,          shadowColor: Colors.transparent,          backgroundColor: lightTheme ? Colors.white : Colors.grey.shade900,          iconTheme: IconThemeData(            color: lightTheme ? Colors.black87 : Colors.white,            size: 29,          ),          title: Text(            'News Round',            style: TextStyle(                fontSize: 20,                fontFamily: 'nunitosSans_regular',                fontWeight: FontWeight.bold,                color: lightTheme ? Colors.black87 : Colors.white),          ),          actions: [],        ),        //Main body content widget        body: RefreshIndicator(          displacement: 30,          backgroundColor: lightTheme              ? Colors.white              : Colors.black87, //Managing color with theme          color: lightTheme              ? Colors.black87              : Colors.white, //Managing color with theme          onRefresh: () async {            setState(() {});          },          child: Container(            width: double.infinity,            height: double.infinity,            color: lightTheme ? Colors.white : Colors.grey.shade900,            //Making Scrollable content            child: BlocBuilder<InternetBloc, InternetState>(              builder: (context, state) {                if(state is internetGainedState){                  return ListView(                    primary: true,                    shrinkWrap: true,                    scrollDirection: Axis.vertical,                    children: [                      //Category navigationBar with horizontal scrollable continers                      Container(                        width: width,                        height: height * 0.058,                        //Generating each item of navigationbar                        child: ListView.builder(                          primary: false,                          shrinkWrap: true,                          scrollDirection: Axis.horizontal,                          itemCount: categories.length,                          itemBuilder: (context, index) {                            //click callback on each category container                            return InkWell(                              onTap: () {                                setState(() {                                  categoryName = categories[index];                                  setState(() {});                                  if (kDebugMode) {                                    print(                                        "$categoryName Tapped on navigation bar menu");                                  }                                });                              },                              //Each contanier's design                              child: Container(                                padding:                                const EdgeInsets.symmetric(horizontal: 15),                                margin: EdgeInsets.only(                                    left: 20,                                    right: index == 12 ? 20 : 0,                                    top: 3,                                    bottom: 3),                                decoration: BoxDecoration(                                  //Providng bg color to container according to if selected or not                                  color: categoryName == categories[index]                                      ? lightTheme                                      ? Colors.black                                      : Colors.white                                      : Colors.transparent,                                  borderRadius:                                  const BorderRadius.all(Radius.circular(12)),                                  border: Border.all(                                      width: 0.3,                                      color: lightTheme                                          ? Colors.black                                          : Colors.white),                                ),                                child: Center(                                  child: Text(                                    //Title from List of category                                    categories[index],                                    style: TextStyle(                                      fontSize: 15,                                      //Providing text color of each container according to if selected or not                                      color: categoryName == categories[index]                                          ? lightTheme                                          ? Colors.white                                          : Colors.black                                          : lightTheme                                          ? Colors.black                                          : Colors.white,                                      fontFamily: 'nunitosSans_semiBold',                                    ),                                  ),                                ),                              ),                            );                          },                        ),                      ),                      //Category item data through API call on each category call                      Container(                        width: width * 1,                        //Generating news articles with Future builder for each category                        child: FutureBuilder(                          future:                          dataLoading(), //Calling API from Category Repository                          builder: (c, s) {                            //When snapshot has data and Connection Satate is done                            if (s.hasData &&                                s.connectionState == ConnectionState.done) {                              //When snapshot has data and load success                              //Returning the bloc of items of different-2 category's API call                              return Container(                                alignment: Alignment.center,                                height: height * 0.78,                                padding: const EdgeInsets.only(                                    top: 0, bottom: 0, left: 13, right: 13),                                //Sub-Item ListView Builder                                child: categoryBuilder(                                    s,                                    c,                                    lightTheme,                                    categoryName,                                    width,                                    height,                                    isTitleVisible,                                    35),                              );                              //When snapshot not yet loaded and Connection State is loading                            } else if (s.connectionState ==                                ConnectionState.waiting) {                              return Container(                                  alignment: Alignment.center,                                  height: height * 0.8,                                  child: Center(                                    child: SpinKitFadingCircle(                                      //Cicular SpinKit Animation till waiting                                      color: lightTheme                                          ? Colors.black87                                          : Colors.white,                                    ),                                  ));                              //Showing Error only on first index -> when something goes wrong                            } else {                              return Container(                                height: height*0.8,                                color: lightTheme                                    ? Colors.white                                    : Colors.grey.shade900,                                alignment: Alignment.center,                                margin: const EdgeInsets.only(                                    top: 0, bottom: 10, left: 5, right: 5),                                child: Text(                                  textAlign: TextAlign.center,                                  'Something went wrong,\nPlease try again',                                  style: TextStyle(                                      fontSize: 16,                                      color: lightTheme ? Colors.black: Colors.white,                                      fontFamily: 'nunitosSans_semiBold',                                      fontWeight: FontWeight.bold),                                ),                              );                            }                          },                        ),                      )                    ],                  );                }else if(state is internetLostState){                  return internetFailedPage(lightTheme);                }else{                  return internetFailedPage(lightTheme);                }              },            ),          ),        ));  }  //Internet failed Widget  Widget internetFailedPage(bool lightTheme) {    return Container(      width: double.infinity,      height: double.infinity,      color: lightTheme?Colors.white:Colors.grey.shade900,      child: Center(        child: Column(          mainAxisAlignment: MainAxisAlignment.center,          crossAxisAlignment: CrossAxisAlignment.center,          children: [            //Connection failed Image            SvgPicture.asset(              'assets/images/internetConnectionFailed.svg',              width: 250,            ),            //Spacer -> Vertical            const SizedBox(              height: 20,            ),            //Connection failed Title            Text(              textAlign: TextAlign.center,              'Internet connection failed,',              style: TextStyle(                  fontSize: 20,                  color: lightTheme?Colors.grey.shade900:Colors.white,                  fontWeight: FontWeight.bold,                  fontFamily: 'nunitosSans_semiBold'),            ),            //Spacer -> Vertical            const SizedBox(              height: 20,            ),            //Elevated Button for refresh callback            InkWell(              //OnRefreshButton click              onTap: () {                //Building whole widget on refresh                setState(() {});              },              child: Container(                  padding:const EdgeInsets.symmetric(vertical: 8,horizontal: 15),                  decoration: BoxDecoration(                      borderRadius:const BorderRadius.all(Radius.circular(5)),                      color: lightTheme?Colors.white:Colors.black,                      border: Border.all(width: 0.3,color: lightTheme?Colors.black:Colors.white)                  ),                  //Button Title                  child: Text(                    'Try Again',                    style: TextStyle(                        fontSize: 16,                        color:lightTheme?Colors.black:Colors.white,                        fontFamily: 'nunitosSans_semiBold'                    ),                  )),            ),          ],        ),      ),    );  }}