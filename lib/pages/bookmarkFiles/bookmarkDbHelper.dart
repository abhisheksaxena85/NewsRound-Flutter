import 'package:flutter/foundation.dart';import 'package:news_round/pages/bookmarkFiles/bookmarkDataModel.dart';import 'package:sqflite/sqflite.dart';import 'package:path/path.dart';/*SQLite3 DataBase Helper Class to store bookmarked articles for one session of time in local storage*/class bookmark_DB_helper{  static Database? database;  final String tableName = 'bookmarkTable';  //Getter of DB  Future<Database?> get db async{      if(database!=null){        return database;      }      return database = await initialize();  }  //Initialization of database if not initialized  Future<Database?> initialize()async{    String documentDirectory = await getDatabasesPath();    String path = join(documentDirectory,'tableDatabase.db');    //Creating a database    var db = await openDatabase(      path,      version: 1,      onCreate: onCreate,    );    return db;  }  //Callback when database is created -- SQL command to create a LB  onCreate(Database database, int version)async{    await database.execute(        '''      CREATE TABLE $tableName (        id INTEGER PRIMARY KEY,        author TEXT,        title TEXT,        description TEXT,        url TEXT,        urlToImage TEXT,        publishedAt TEXT,        content TEXT,        sourceId TEXT,        sourceName TEXT      )    '''    );  }  //Inserting data in database with this future callback  Future<bookmarkDataModel> insert(bookmarkDataModel dataModel)async{    var dbClient = await db;    await dbClient!.insert(tableName,dataModel.toJson());    return dataModel;  }  //Deleting data in database by this callback  Future<int> delete(String? url)async{    var dbClient = await db;    return await dbClient!.delete(      tableName,      where: 'url = ?',      whereArgs: [url]    );  }  //Checking if given article is available in database using it's url as argument            **By Me  // Future<List<Map<String, Object?>>> findArticle(String url)async{  //   var dbClient = await db;  //   return await dbClient!.query(  //       tableName,  //       where: 'url = ?',  //       whereArgs: [url]  //   );  // }  // Checking if given article is available in database using its URL as argument            **By ChatGPT  Future<bool?> isURLAvailable(String? url) async {    var dbClient = await db;    try{      final count = Sqflite.firstIntValue(await dbClient!.rawQuery(        'SELECT COUNT(*) FROM $tableName WHERE url = ?',        [url],      ));      return count==0 ?false:true;    }catch(e){      if (kDebugMode) {        print('Error caught by try catch in isUrlAvailable method of database helper class$e');      }    }    return false;  }  //Getting data in a list to show in listview  Future<List<bookmarkDataModel>> getDataList()async{    var dbClient = await db;    final List<Map<String, Object?>> queryResult = await dbClient!.query(tableName);    return queryResult.map((e) => bookmarkDataModel.fromJson(e)).toList();  }}