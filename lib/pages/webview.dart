import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/svg.dart';import 'package:webview_flutter/webview_flutter.dart';class webview extends StatefulWidget {  //Getting URL  final String webUrl;  webview({required this.webUrl});  @override  State<webview> createState() => _webviewState();}class _webviewState extends State<webview>{  final WebViewController _controller = WebViewController();  double webLoadingValue = 0;  bool webPageLoading = true;  bool webPageFailed = false;  bool canPopClass = false;  bool internetFailed = false;  @override  void initState() {    super.initState();    navigationDelegate();    _controller.loadRequest(Uri.parse(widget.webUrl));  }  @override  void dispose() {    super.dispose();  }  void navigationDelegate()async{    _controller.enableZoom(true);    _controller.setJavaScriptMode(JavaScriptMode.unrestricted);    _controller.setNavigationDelegate(        NavigationDelegate(            onPageStarted: (value){              internetFailed = false;              if(mounted){                setState(() {                  webPageLoading = true;                });              }              if (kDebugMode) {                print('Page started loading+ $value');              }            },            onPageFinished: (value){              popClass();              if(mounted){                setState(() {                  webPageLoading = false;                });              }              print('page finished +$value');            },            onProgress: (value){              if(mounted){                setState(() {                  webLoadingValue = value.toDouble();                });              }              print('page loading +$value');            },            onWebResourceError: (value){              if(value.description.toString() == 'net::ERR_INTERNET_DISCONNECTED'){                internetFailed = true;              }else{                internetFailed = false;              }              setState(() {});            },        )    );  }  @override  Widget build(BuildContext context) {    bool lightTheme = MediaQuery.of(context).platformBrightness == Brightness.light ? true : false;    return Scaffold(      appBar: AppBar(          elevation: 0,          title: Text(            widget.webUrl,            style: TextStyle(              fontSize: 14,              color:lightTheme ?Colors.black87: Colors.white,              fontFamily: 'nunitosSans_regular'            ),          ),          backgroundColor: lightTheme ? Colors.white : Colors.grey.shade900,          centerTitle: true,          leading: IconButton(            tooltip: "Navigation",            icon:Icon(Icons.arrow_back_ios_sharp,color: lightTheme ?Colors.black87:Colors.white,size: 25,),            onPressed: (){              Navigator.of(context).pop();            },          ),          actions: [            Container(              margin:const EdgeInsets.only(right: 6),              child: InkWell(                onTap: (){                  navigationDelegate();                  _controller.loadRequest(Uri.parse(widget.webUrl));                },                child:Icon(Icons.refresh_sharp,color: lightTheme ?Colors.black87:Colors.white,size: 25,),              ))          ],        ),      body: Column(        mainAxisAlignment: MainAxisAlignment.start,        crossAxisAlignment: CrossAxisAlignment.center,        children: [          webPageLoading ? LinearProgressIndicator(            color:lightTheme?Colors.blue :Colors.blue,            minHeight: 4,            value: webLoadingValue*0.01,          ):const SizedBox(),          WillPopScope(            onWillPop:_onWillPop,              child: Expanded(            child:internetFailed? internetFailedPage(lightTheme):WebViewWidget(              controller: _controller,            ),          )),        ],      )    );  }  Future<bool> _onWillPop() async {    if (await _controller.canGoBack()) {      _controller.goBack();      return false;    } else {      return true; // Close the class    }  }  void popClass()async{    canPopClass = await _controller.canGoBack();  }  //Internet failed Widget  Widget internetFailedPage(bool lightTheme) {    return Container(      width: double.infinity,      height: double.infinity,      color: lightTheme?Colors.white:Colors.grey.shade900,      child: Center(        child: Column(          mainAxisAlignment: MainAxisAlignment.center,          crossAxisAlignment: CrossAxisAlignment.center,          children: [            //Connection failed Image            SvgPicture.asset(              'assets/images/internetConnectionFailed.svg',              width: 250,            ),            //Spacer -> Vertical            const SizedBox(              height: 20,            ),            //Connection failed Title            Text(              textAlign: TextAlign.center,              'Internet connection failed,',              style: TextStyle(                  fontSize: 20,                  color: lightTheme?Colors.grey.shade900:Colors.white,                  fontWeight: FontWeight.bold,                  fontFamily: 'nunitosSans_semiBold'),            ),            //Spacer -> Vertical            const SizedBox(              height: 20,            ),            //Elevated Button for refresh callback            InkWell(              //OnRefreshButton click              onTap: () {                //Building whole widget on refresh                navigationDelegate();                _controller.loadRequest(Uri.parse(widget.webUrl));               },              child: Container(                  padding:const EdgeInsets.symmetric(vertical: 8,horizontal: 15),                  decoration: BoxDecoration(                      borderRadius:const BorderRadius.all(Radius.circular(5)),                      color: lightTheme?Colors.white:Colors.black,                      border: Border.all(width: 0.3,color: lightTheme?Colors.black:Colors.white)                  ),                  //Button Title                  child: Text(                    'Try Again',                    style: TextStyle(                        fontSize: 16,                        color:lightTheme?Colors.black:Colors.white,                        fontFamily: 'nunitosSans_semiBold'                    ),                  )),            ),          ],        ),      ),    );  }  }