import 'dart:async';import 'package:flutter/cupertino.dart';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_spinkit/flutter_spinkit.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';import 'package:news_round/internetBloc/internet_bloc.dart';import 'package:news_round/internetBloc/internet_state.dart';import 'package:news_round/newsViewModel/newsHeadlineViewModel.dart';import 'package:news_round/pages/dashboardWidgets/categoriesContentWidget.dart';import 'package:news_round/pages/settingsPage.dart';import 'package:news_round/pages/dashboardWidgets/dashboardHeadlineWidget.dart';import 'package:news_round/userDataCollectionLocal/interstedCategories.dart';class dashboardScreen extends StatefulWidget {  final List<String>? selectedCategories;  dashboardScreen({this.selectedCategories});  @override  State<dashboardScreen> createState() => _dashboardScreenState();}/*Change Notifier _dashboradScreenState dispose Exception BUG fixed => Unneccesary change notifier with state class*/class _dashboardScreenState extends State<dashboardScreen> {  //API Url with API key STATIC  String? APIbaseUrl = "https://newsapi.org/v2/top-headlines?country=";  String? APIcountry = "India";  String? APIcountryCode = 'in';  String? APIkey = "&apiKey=4b97db65aa3340c786ccbc5c56390312";  //Headline news ViewModel to fetch data  newsHeadlineViewModel news_view_model = newsHeadlineViewModel();  //Index of bottom Nav  int navigationIndex = 0;  //Handling the refresh callBack with Timer class  Future<void> refreshHandling() async {    setState(() {});    return Future.delayed(const Duration(seconds: 1));  }  @override  void initState() {    super.initState();  }  @override  Widget build(BuildContext context) {    //ThemeMode boolean    bool theme = MediaQuery.of(context).platformBrightness == Brightness.light;    bool lightTheme = theme ? true : false;    //*Changing the color of statusBar of this screen    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(      statusBarColor: lightTheme ? Colors.white : Colors.black54,    ));    //Categories selected by User    List<String>? selectedCategories = widget.selectedCategories;    //Root Widget of dashboardClass    return Scaffold(        appBar: AppBar(          elevation: 0,          surfaceTintColor:lightTheme?Colors.white:Colors.grey.shade900,          backgroundColor: lightTheme ? Colors.white : Colors.grey.shade900,          //Title of AppBar of dashboard          title: Text('News Round',            style: TextStyle(                fontSize: 20,                fontFamily: 'nunitosSans_regular',                fontWeight: FontWeight.bold,                color: lightTheme ? Colors.black87 : Colors.white),          ),          //Setting Icon with click functionality          actions: [            IconButton(tooltip: 'Settings',              icon: Icon(Icons.settings,                color: lightTheme ? Colors.black87 : Colors.white,                size: 27,              ),              //Redirecting to setting class on Click              onPressed: () {                Navigator.push(                    context,                    MaterialPageRoute(builder: (context) {                      return interstedCategories(true);                    })                );              },            )          ],        ),        //Providing the Internet Bloc to dashboard        body: BlocBuilder<InternetBloc, InternetState>(          builder: (context, state) {            //When internet is connected            if (state is internetGainedState) {              return dashboardContent(context, lightTheme,selectedCategories);            //When internet is failed            } else if (state is internetLostState) {              return internetFailedPage(lightTheme);            //When something else happens            } else {              return internetFailedPage(lightTheme);            }          },        )    );  }  //Full Dashboard Screen Layout  Widget dashboardContent(BuildContext context, bool lightTheme,List<String>? selectedCategories) {    //Getting available screen width & height    double width = MediaQuery.of(context).size.width * 1;    double height = MediaQuery.of(context).size.height * 0.5;    //Debug only    if (kDebugMode) {      print(APIbaseUrl! + APIcountryCode! + APIkey!.toString());    }    //Root Widget with RefreshIndicator    return RefreshIndicator(        displacement: 30,        backgroundColor: lightTheme ? Colors.white : Colors.black87, //Managing color with theme        color: lightTheme ? Colors.black87 : Colors.white, //Managing color with theme        onRefresh: refreshHandling, //On refresh call back method        //Scrollable whole content list        child: ListView(          primary: true,            shrinkWrap: true,            scrollDirection: Axis.vertical,            children:[              //DashBoard Headlines Part              dashboardHeadlineWidget(context, lightTheme, width, height,APIbaseUrl! + APIcountryCode! + APIkey!),              //Category Part              categoriesContent(selectedCategories:selectedCategories!,lightTheme:lightTheme,countryCode:APIcountry!,context:context,width:width,height:height),            ]        ),    );  }  //Dashboard headline widget with future builder  Widget dashboardHeadlineWidget(BuildContext context, bool lightTheme, double width, double height, String url) { //Getting required info from dashboardContent widget    //Main Headline widget with list of headline news content Horizontaly scrollable    return Container(      color: lightTheme ? Colors.white : Colors.grey.shade900, //Managing colors according to theme      height: height,      //Implementing future builder for API call and Response because of time latency      child: FutureBuilder(        future: newsHeadlineViewModel().fechNewsHeadlines(url), //Calling API from NewsHeadline Repository        //Building widget when API is being called        builder: (context, snapshot) {          //When Connection state is waiting to complete,  Showing the SpinKit Animation          if (snapshot.connectionState == ConnectionState.waiting) {            return SizedBox(                child: Center(                    child: SpinKitFadingCircle(                      color: lightTheme ? Colors.black87 : Colors.white,                    )                ));          //Calling headlineListViewBuilder when Connection state is completed and Response has Data          } else if (snapshot.hasData &&snapshot.connectionState == ConnectionState.done) {            return headlineListViewBuilder(snapshot, width, height, lightTheme,context);          //Otherwise showing the simple Error message, When anything else happens          } else {            return SizedBox(              height: height,              child: Center(                child: Text(                  textAlign: TextAlign.center,                  'Something went wrong,\nPlease try again',                  style: TextStyle(                      fontSize: 16,                      color: lightTheme ? Colors.black: Colors.white,                      fontFamily: 'nunitosSans_semiBold',                      fontWeight: FontWeight.bold),                ),              ),            );          }        },      ),    );  }  //Internet failed Widget  Widget internetFailedPage(bool lightTheme) {    return Container(      width: double.infinity,      height: double.infinity,      color: lightTheme?Colors.white:Colors.grey.shade900,      child: Center(        child: Column(          mainAxisAlignment: MainAxisAlignment.center,          crossAxisAlignment: CrossAxisAlignment.center,          children: [            //Connection failed Image            SvgPicture.asset(              'assets/images/internetConnectionFailed.svg',              width: 250,            ),            //Spacer -> Vertical            const SizedBox(              height: 20,            ),            //Connection failed Title            Text(              textAlign: TextAlign.center,              'Internet connection failed,',              style: TextStyle(                  fontSize: 20,                  color: lightTheme?Colors.grey.shade900:Colors.white,                  fontWeight: FontWeight.bold,                  fontFamily: 'nunitosSans_semiBold'),            ),            //Spacer -> Vertical            const SizedBox(              height: 20,            ),            //Elevated Button for refresh callback            InkWell(              //OnRefreshButton click              onTap: () {                //Building whole widget on refresh                setState(() {});              },              child: Container(                padding:const EdgeInsets.symmetric(vertical: 8,horizontal: 15),                decoration: BoxDecoration(                  borderRadius:const BorderRadius.all(Radius.circular(5)),                  color: lightTheme?Colors.white:Colors.black,                  border: Border.all(width: 0.3,color: lightTheme?Colors.black:Colors.white)                ),                  //Button Title                  child: Text(                      'Try Again',                    style: TextStyle(                      fontSize: 16,                      color:lightTheme?Colors.black:Colors.white,                      fontFamily: 'nunitosSans_semiBold'                    ),                  )),            ),          ],        ),      ),    );  }}